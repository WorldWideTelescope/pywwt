# Deployment workflows, run when all CI tests pass on the `master` or `rc
# branches. NB: right now we do nothing on `master`! (But we need a dummy job to
# keep Pipelines happy.) That could change.

parameters:
  - name: isMainDev
    type: boolean
    default: false
  - name: isRelease
    type: boolean
    default: false

jobs:

- ${{ if parameters.isMainDev }}:
  - job: dummy_setup_only
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: azure-job-setup.yml

- ${{ if parameters.isRelease }}:
  - job: branch_and_tag
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupCranko: true
        setupGit: true
    - bash: |
        set -xeuo pipefail
        cranko release-workflow tag
        git push --tags origin release:release

        if cranko show if-released --exit-code pypa:pywwt ; then
          # Special "stable" branch that ReadTheDocs watches. It doesn't seem
          # possible to customize the name.
          git push origin release:stable
        fi
      displayName: Tag and push
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: github_releases
    dependsOn: branch_and_tag # otherwise, GitHub creates the tag itself
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupCranko: true
        setupGit: true
    - bash: |
        set -xeuo pipefail
        cranko github create-releases
      displayName: Create GitHub releases
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: python_publish
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupBuild: true
        setupCranko: true
    - bash: |
        set -euo pipefail
        source activate-conda.sh
        set -x
        \conda install -y twine

        cranko python install-token

        # If we ever become a monorepo, we'll need to figure out how to make sure
        # that we only upload the proper packages.
        if cranko show if-released --exit-code pypa:pywwt ; then
          twine upload $BASH_WORKSPACE/sdist/*.tar.gz
        fi
      displayName: Publish PyPI releases
      env:
        PYPI_TOKEN: $(PYPI_TOKEN)

  - job: npm_publish
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupBuild: true
        setupCranko: true
        setupNpm: true
    - bash: cd frontend && npm install
      displayName: NPM install
    - bash: cd frontend && npm run build
      displayName: NPM build
    - bash: |
        set -xeuo pipefail
        cranko npm foreach-released npm publish
      displayName: Publish to NPM
    - bash: shred ~/.npmrc
      displayName: Clean up credentials

  - job: zenodo_publish
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: Deployment Credentials

    steps:
    - template: azure-job-setup.yml
      parameters:
        setupCranko: true

    - bash: |
        set -xeuo pipefail

        if cranko show if-released --exit-code pypa:pywwt ; then
          cranko zenodo upload-artifacts --metadata=ci/zenodo.json5 $BASH_WORKSPACE/sdist/*.tar.gz
        fi
      displayName: Upload source tarball
      env:
        ZENODO_TOKEN: $(ZENODO_TOKEN)

    - bash: |
        set -xeuo pipefail

        if cranko show if-released --exit-code pypa:pywwt ; then
          cranko zenodo publish --metadata=ci/zenodo.json5
        fi
      displayName: Publish to Zenodo
      env:
        ZENODO_TOKEN: $(ZENODO_TOKEN)
