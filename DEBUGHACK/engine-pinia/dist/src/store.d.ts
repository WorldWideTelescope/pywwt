import { ImageSetType, ScaleTypes, SolarSystemObjects } from "@wwtelescope/engine-types";
import { Annotation, EngineSetting, Folder, Guid, Imageset, ImageSetLayer, InViewReturnMessage, Layer, SpreadSheetLayer, SpreadSheetLayerSettingsInterfaceRO } from "@wwtelescope/engine";
import { AddCatalogHipsByNameOptions, AddImageSetLayerOptions, ApplyFitsLayerSettingsOptions, ApplyTableLayerSettingsOptions, CaptureFrameOptions, GetCatalogHipsDataInViewOptions, GotoTargetOptions, ImageSetLayerState as ImageSetLayerSettings, LoadFitsLayerOptions, SetFitsLayerColormapOptions, SetLayerOrderOptions, SetupForImagesetOptions, SpreadSheetLayerState, StretchFitsLayerOptions, UpdateTableLayerOptions, WWTInstance, CaptureVideoOptions } from "@wwtelescope/engine-helpers";
interface WWTLinkedCallback {
    (): void;
}
export declare class WWTGlobalState {
    inst: WWTInstance | null;
    onLinkedCallbacks: WWTLinkedCallback[];
    link(inst: WWTInstance): void;
    unlink(): void;
}
/** This class holds basic information about an imageset.
 *
 * Discover imagesets through the [[WWTAwareComponent.wwtAvailableImagesets]]
 * state variable. In standard practice there will be hundreds of available
 * imagesets of many different kinds.
 *
 * Imagesets may be uniquely identified by their associated image data [[url]].
 * (If you really need to have multiple imagesets associated with the same URL,
 * add a `#fragment` to the end.)
 */
export declare class ImagesetInfo {
    /** The URL of the image data. */
    url: string;
    /** The user-facing name of the imageset. */
    name: string;
    /** The type of the imageset: panorama, sky, ... */
    type: ImageSetType;
    /** The internal GUID of the layer, if it is a HiPS layer */
    id: string | null;
    /** An (application-specific) string giving some additional information about
     * the imageset. */
    description: string;
    /** The image filename extension(s) associated with this imageset.
     *
     * May include multiple extensions separated by spaces. May also start with a
     * leading period.
     */
    extension: string;
    constructor(url: string, name: string, type: ImageSetType, description: string, extension: string, id?: string | null);
    static fromImageset(imageset: Imageset): ImagesetInfo;
}
export declare class SpreadSheetLayerInfo {
    /** The user-facing name of the layer */
    name: string;
    /** The internal GUID of the layer */
    id: string;
    /** The reference frame in which the data are defined. */
    referenceFrame: string;
    setName(name: string): void;
    constructor(id: string, referenceFrame: string, name?: string);
}
/** This type defines the union of the various spreadsheet layers.
 *
 * Currently this includes standard spreadsheet layers, and HiPS catalog
 * layers, which are a sort of hybrid between spreadsheet and imageset
 * layers.
 */
export declare type CatalogLayerInfo = SpreadSheetLayerInfo | ImagesetInfo;
/** Information about an active imageset layer. */
export declare class ImageSetLayerState {
    /** Layer parameters exposed in WWT's generic "settings" system.
     *
     * This field is an instance of the [@wwtelescope/engine-helpers]
     * [ImageSetLayerState] class (which has the same name as this class, but is
     * different).
     *
     * [@wwtelescope/engine-helpers]: ../../engine-helpers/
     * [ImageSetLayerState]: ../../engine-helpers/classes/imagesetlayerstate.html
    */
    settings: ImageSetLayerSettings;
    /** For FITS-like images, the "stretch" used for color-mapping the image data. */
    scaleType: ScaleTypes;
    /** For FITS-like images, the lower cutoff used for color-mapping the image data. */
    vmin: number;
    /** For FITS-like images, the upper cutoff used for color-mapping the image data. */
    vmax: number;
    /** For FITS-like images, the name of the color map used to render the image
     * data.
     *
     * See [here](../../engine/modules/colormapcontainer.html#fromnamedcolormap)
     * for the supported options. */
    colormapName: string;
    private guidText;
    constructor(source: ImageSetLayer);
    getGuid(): string;
}
/** This interface expresses the properties exposed by the WWT Engineâ€™s Pinia
 * store module.
 *
 * See [[WWTAwareComponent]] for an organized overview of the different aspects
 * of WWT state that are exposed in the Pinia framework, along with associated
 * getters and actions.
 *
 * Much of this interface duplicates state that is already stored within the WWT
 * engine itself (i.e., the `WWTInstance`). Due to the way that the Vue/Pinia
 * reactivity framework works, we need to mirror the engine state into Pinia. The
 * first reason to do this is that, as far as I can tell, there's no good way to
 * integrate the "external" state of the WWT instance into the reactivity
 * framework so that dependencies can be mapped correctly. And we can't just
 * integrate the WWT instance into the reactivity framework -- well, I haven't
 * tried, but I'm 99% sure that it won't work with all of the WebGL textures and
 * whatnot. I.e., the WWT types that hold state are not "plain old data".
 *
 * The second reason is that it is recommended for app state to be flattened and
 * normalized when expressed in a store, as in [this post]. The WWT engine
 * certainly does *not* express its state in such a manner.
 *
 * [this post]: https://forum.vuejs.org/t/vuex-best-practices-for-complex-objects/10143/2
 *
 * The duplication of WWT's data structures is annoying, but the actual amount
 * of mirrored data isn't very big.
 */
export interface WWTEnginePiniaState {
    /** Info about the imagesets that are available in the engine to be used as backgrounds */
    availableImagesets: ImagesetInfo[];
    /** The current imageset acting as the background imagery, if defined. */
    backgroundImageset: Imageset | null;
    /** The number of times that the WWT engine clock has been changed in a
     * discontinuous manner.
     *
     * The point of this property is that one can watch() it and get alerted to
     * when this happens.
     */
    clockDiscontinuities: number;
    /** The rate at which the WWT engine clock progresses, compared to real time. */
    clockRate: number;
    /** The current WWT clock time of the view, as a UTC Date. */
    currentTime: Date;
    /** The current declination of the view, in radians.
     *
     * TODO: define this properly for planetary lat/lng views!
     */
    decRad: number;
    /** The current imageset acting as the foreground imagery, if defined. */
    foregroundImageset: Imageset | null;
    /** The opacity with which the foreground imageset is rendered; valid
     * values are between 0 and 100 (inclusive).
     */
    foregroundOpacity: number;
    /** Whether the tour playback mode is active.
     *
     * Specifically, this is true if the `WWTControl` has a `uiController` item
     * that is a `TourPlayer` item. See also [[isTourPlaying]].
     */
    isTourPlayerActive: boolean;
    /** Whether a tour is actively playing right now.
     *
     * It might be the case that a tour player is active, but the tour is paused.
     */
    isTourPlaying: boolean;
    /** The current right ascension of the view, in radians.
     *
     * TODO: define this properly for planetary lat/lng views!
     */
    raRad: number;
    /** The current mode of the renderer */
    renderType: ImageSetType;
    /** The current roll of the view camera, in radians */
    rollRad: number;
    /** The time when the state is created */
    timeAtStartup: number;
    /** The number of times that a tour has played through to the end.
     *
     * The point of this property is that one can watch() it and get alerted to
     * tour completion.
     */
    tourCompletions: number;
    /** The total run-time of the current tour, if there is one, measured in seconds. */
    tourRunTime: number | null;
    /** The start times of the stops in the tour, measured in seconds.
     *
     * It is possible for tour stops to be linked in a non-linear order, such that
     * actual playback won't proceed linearly in the way that this API would imply.
     */
    tourStopStartTimes: number[];
    /** How far we have progressed into the current tour, in seconds.
     *
     * This number does not necessarily progress monotonically due to the way that
     * WWT measures tour playback progress. We associate a start time with each
     * "stop" in the tour, and can measure progress through a stop, but stops do
     * not necessarily transition from one to another in linear fashion.
     *
     * That being said, this number should range between 0 and the runtime of the
     * current tour. If no tour is loaded, it will be zero.
     */
    tourTimecode: number;
    showWebGl2Warning: boolean;
    /** The current zoom level of the view, in degrees.
     *
     * The zoom level is the angular height of the viewport, times size.
     *
     * TODO: define this properly for 3D modes!
     */
    zoomDeg: number;
    /** The GUIDs of all rendered layers, in their draw order. */
    activeLayers: string[];
    /** Settings for all registered imageset layers. */
    imagesetLayers: {
        [guidtext: string]: ImageSetLayerState;
    };
    /** Settings for all registered WWT spreadsheet layers. */
    spreadSheetLayers: {
        [guidtext: string]: SpreadSheetLayerState;
    };
}
/** The parameters for the [[createTableLayer]] action. */
export interface CreateTableLayerParams {
    /** The name to assign the layer. TODO: understand where (if anywhere) this name is exposed. */
    name: string;
    /** The name of the reference frame to which this layer is attached. */
    referenceFrame: string;
    /** The table data, as big CSV string. */
    dataCsv: string;
}
export interface TimeToRADecZoomParams {
    /** The right ascension of the target, in radians. */
    raRad: number;
    /** The declination of the target, in radians. */
    decRad: number;
    /** The zoom level of the target, in *degrees*. */
    zoomDeg: number;
    /** Optional: The target roll of the target, in radians. */
    rollRad?: number;
}
/** The parameters for the [[gotoRADecZoom]] action. */
export interface GotoRADecZoomParams {
    /** The right ascension to go to, in radians. */
    raRad: number;
    /** The declination to go to, in radians. */
    decRad: number;
    /** The zoom level to go to, in *degrees*. This is the final angular height of
     * the WWT viewport. */
    zoomDeg: number;
    /** Whether the view should navigate instantly or pan smoothly.
     *
     * Smooth panning is generally preferable from a UX perspective because it
     * gives the engine time to download any data files that it may need to render
     * the view.
     */
    instant: boolean;
    /** Optional: The target roll of the camera, in radians. */
    rollRad?: number;
}
/** The parameters for the [[loadTour]] action.
 */
export interface LoadTourParams {
    /** The tour URL to load. */
    url: string;
    /** Whether to start playing it immediately. */
    play: boolean;
}
/** The parameters for the [[loadImageCollection]] action. */
export interface LoadImageCollectionParams {
    /** The WTML URL to load. */
    url: string;
    /** Optional, Recursively load any child folders. Defaults to false*/
    loadChildFolders?: boolean;
}
/** The WWT Pinia implementation.
 *
 * See [[WWTAwareComponent]] for an organized overview of the state variables,
 * getters, and actions exposed by this module.
 */
export declare const engineStore: import("pinia").StoreDefinition<"wwt-engine", WWTEnginePiniaState, {
    lookupImageset(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (imagesetName: string) => Imageset | null;
    findRADecForScreenPoint(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (pt: {
        x: number;
        y: number;
    }) => {
        ra: number;
        dec: number;
    };
    findScreenPointForRADec(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (pt: {
        ra: number;
        dec: number;
    }) => {
        x: number;
        y: number;
    };
    imagesetStateForLayer(state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (guidtext: string) => ImageSetLayerState | null;
    activeImagesetLayerStates(): ImageSetLayerState[];
    catalogLayerKey(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (catalog: CatalogLayerInfo) => string;
    imagesetForLayer(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (guidtext: string) => Imageset | null;
    imagesetLayerById(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (id: string) => ImageSetLayer | null;
    layerForHipsCatalog(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (name: string) => SpreadSheetLayer | null;
    layerById(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (id: string) => Layer | null;
    spreadsheetStateForHipsCatalog(state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (name: string) => SpreadSheetLayerSettingsInterfaceRO | null;
    spreadSheetLayerById(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (id: string) => SpreadSheetLayer | null;
    spreadsheetStateById(state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (id: string) => SpreadSheetLayerSettingsInterfaceRO | null;
    spreadSheetLayer(_state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (catalog: CatalogLayerInfo) => SpreadSheetLayer | null;
    spreadsheetState(state: {
        availableImagesets: {
            url: string;
            name: string;
            type: ImageSetType;
            id: string | null;
            description: string;
            extension: string;
        }[];
        backgroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        clockDiscontinuities: number;
        clockRate: number;
        currentTime: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        };
        decRad: number;
        foregroundImageset: {
            get_altUrl: () => string;
            set_altUrl: (url: string) => string;
            get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
            set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
            get_baseLevel: () => number;
            set_baseLevel: (bl: number) => number;
            get_baseTileDegrees: () => number;
            set_baseTileDegrees: (v: number) => number;
            get_bottomsUp: () => boolean;
            set_bottomsUp: (bu: boolean) => boolean;
            get_centerX: () => number;
            set_centerX: (cx: number) => number;
            get_centerY: () => number;
            set_centerY: (cy: number) => number;
            get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
            get_creditsText: () => string;
            set_creditsText: (ct: string) => string;
            get_creditsUrl: () => string;
            set_creditsUrl: (cu: string) => string;
            get_dataSetType: () => ImageSetType;
            set_dataSetType: (st: ImageSetType) => ImageSetType;
            get_defaultSet: () => boolean;
            set_defaultSet: (ds: boolean) => boolean;
            get_demUrl: () => string;
            set_demUrl: (url: string) => string;
            get_elevationModel: () => boolean;
            set_elevationModel: (em: boolean) => boolean;
            get_extension: () => string;
            set_extension: (ext: string) => string;
            get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
            get_generic: () => boolean;
            set_generic: (g: boolean) => boolean;
            get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
            get_imageSetID: () => number;
            set_imageSetID: (id: number) => number;
            get_isCloudCommunityItem: () => boolean;
            get_isFolder: () => boolean;
            get_isImage: () => boolean;
            get_isTour: () => boolean;
            get_levels: () => number;
            set_levels: (levels: number) => number;
            get_meanRadius: () => number;
            set_meanRadius: (mr: number) => number;
            get_mercator: () => boolean;
            set_mercator: (m: boolean) => boolean;
            get_name: () => string;
            set_name: (name: string) => string;
            get_offsetX: () => number;
            set_offsetX: (ox: number) => number;
            get_offsetY: () => number;
            set_offsetY: (oy: number) => number;
            get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
            set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
            get_readOnly: () => boolean;
            get_referenceFrame: () => string;
            set_referenceFrame: (rf: string) => string;
            get_rotation: () => number;
            set_rotation: (r: number) => number;
            get_quadTreeTileMap: () => string;
            set_quadTreeTileMap: (qttm: string) => string;
            get_singleImage: () => boolean;
            set_singleImage: (si: boolean) => boolean;
            get_sparse: () => boolean;
            set_sparse: (s: boolean) => boolean;
            get_thumbnailUrl: () => string;
            set_thumbnailUrl: (url: string) => string;
            get_url: () => string;
            set_url: (url: string) => string;
            get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
            set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
            get_widthFactor: () => number;
            set_widthFactor: (f: number) => number;
            getHashCode: () => number;
        } | null;
        foregroundOpacity: number;
        isTourPlayerActive: boolean;
        isTourPlaying: boolean;
        raRad: number;
        renderType: ImageSetType;
        rollRad: number;
        timeAtStartup: number;
        tourCompletions: number;
        tourRunTime: number | null;
        tourStopStartTimes: number[];
        tourTimecode: number;
        showWebGl2Warning: boolean;
        zoomDeg: number;
        activeLayers: string[];
        imagesetLayers: {
            [guidtext: string]: ImageSetLayerState;
        };
        spreadSheetLayers: {
            [guidtext: string]: SpreadSheetLayerState;
        };
    } & import("pinia").PiniaCustomStateProperties<WWTEnginePiniaState>): (catalog: CatalogLayerInfo) => SpreadSheetLayerSettingsInterfaceRO | null;
}, {
    internalLinkToInstance(wwt: WWTInstance): void;
    internalUnlinkFromInstance(): void;
    internalUpdate(): void;
    internalIncrementTourCompletions(): void;
    applySetting(setting: EngineSetting): void;
    setBackgroundImageByName(imagesetName: string): void;
    setForegroundImageByName(imagesetName: string): void;
    setForegroundOpacity(opacity: number): void;
    setupForImageset(options: SetupForImagesetOptions): void;
    zoom(factor: number): void;
    move(args: {
        x: number;
        y: number;
    }): void;
    tilt(args: {
        x: number;
        y: number;
    }): void;
    setTime(time: Date): void;
    setClockRate(rate: number): void;
    setClockSync(isSynced: boolean): void;
    startTour(): void;
    toggleTourPlayPauseState(): void;
    setTourPlayerLeaveSettingsWhenStopped(value: boolean): void;
    seekToTourTimecode(value: number): void;
    viewAsTourXml(name: string): Promise<string | null>;
    waitForReady(): Promise<void>;
    gotoRADecZoom({ raRad, decRad, zoomDeg, instant, rollRad }: GotoRADecZoomParams): Promise<void>;
    timeToRADecZoom({ raRad, decRad, zoomDeg, rollRad }: TimeToRADecZoomParams): number;
    gotoTarget(options: GotoTargetOptions): Promise<void>;
    setTrackedObject(obj: SolarSystemObjects): void;
    loadTour({ url, play }: LoadTourParams): Promise<{
        tourRunTime: number | null;
        tourStopStartTimes: number[];
    }>;
    loadImageCollection({ url, loadChildFolders }: LoadImageCollectionParams): Promise<Folder>;
    addImagesetToRepository(imgset: Imageset): Imageset;
    deleteLayer(id: string | Guid): void;
    addImageSetLayer(options: AddImageSetLayerOptions): Promise<ImageSetLayer>;
    loadFitsLayer(options: LoadFitsLayerOptions): Promise<ImageSetLayer>;
    setImageSetLayerOrder(options: SetLayerOrderOptions): void;
    stretchFitsLayer(options: StretchFitsLayerOptions): void;
    setFitsLayerColormap(options: SetFitsLayerColormapOptions): void;
    applyFitsLayerSettings(options: ApplyFitsLayerSettingsOptions): void;
    createTableLayer(options: CreateTableLayerParams): Promise<SpreadSheetLayer>;
    applyTableLayerSettings(options: ApplyTableLayerSettingsOptions): void;
    updateTableLayer(options: UpdateTableLayerOptions): void;
    addCatalogHipsByName(options: AddCatalogHipsByNameOptions): Promise<Imageset>;
    getCatalogHipsDataInView(options: GetCatalogHipsDataInViewOptions): Promise<InViewReturnMessage>;
    removeCatalogHipsByName(name: string): void;
    addAnnotation(ann: Annotation): void;
    removeAnnotation(ann: Annotation): void;
    clearAnnotations(): void;
    captureFrame(options: CaptureFrameOptions): Promise<Blob | null>;
    captureVideo(options: CaptureVideoOptions): ReadableStream<Blob | null>;
}>;
export {};
